[
  {
    "objectID": "01-rstudio.html",
    "href": "01-rstudio.html",
    "title": "Using RStudio in the cloud",
    "section": "",
    "text": "This lesson is designed to be run on posit.cloud in a workshop situation, but there is no reason it can’t be completed using RStudio Desktop if you are familiar with it. The lessons would need to be downloaded from Github and packages installed, but directions for that are beyond the scope of this lesson."
  },
  {
    "objectID": "01-rstudio.html#the-story-so-far",
    "href": "01-rstudio.html#the-story-so-far",
    "title": "Using RStudio in the cloud",
    "section": "The story so far …",
    "text": "The story so far …\nWe are assuming at this point that you have:\n\nUsing a web browser, signed up and logged into posit.cloud\nYou’ve used the New Project button to choose New Project from Git Repository …\n.. and that you opened this repo: utdata/utdata-intro2r.\nOnce loaded, you opened this file, called 01-rstudio.qmd.\n\nIf all that is true, then you are running a “virtual machine” in your browser that has R and RStudio installed, and you have a “project” open, and in that project you reading this file.\n\nmight need more here."
  },
  {
    "objectID": "01-rstudio.html#part-one-getting-familiar-with-rstudio",
    "href": "01-rstudio.html#part-one-getting-familiar-with-rstudio",
    "title": "Using RStudio in the cloud",
    "section": "Part One: Getting familiar with RStudio",
    "text": "Part One: Getting familiar with RStudio\nRStudio is your dashboard for writing R code. Open files will show up in the upper-left quadrant of RStudio.\nThe upper-right quadrant has several tabs, the first of which is environment: if you store any information in variables (such as a table of data), they will show up there.\nThe lower-right quadrant also has several tabs, the first of which is Files: it shows what files exist in your current working directory, which is this workshop folder. Among those files are ones that end with .qmd, which are Quarto files we will edit. Once opened, they appear in the upper-left quadrant.\nIn the lower-left, you’ll see the Console. This will reflect all the R code you run, but we don’t do much with it when we’re working in Quarto files.\nWe encourage the use of Quarto Document files (.qmd), which enable you to both write comments (like these sentences) and to write code, in what we call a code chunk.\n\nAt the top-right of the code chunk below you’ll see right-pointing green arrow. Click on that arrow and you’ll “run” all the code inside the chunk.\n\n\nx &lt;- \"Hello, World!\"\n\nprint(x)\n\n[1] \"Hello, World!\"\n\n\nIn Quarto files, the results of the code in each code chunk will print below the chunk, allowing you to quickly see the results of your work. This allows us to intersperse our prose notes and explanations inbetween our code.\nYou create a code chunk by typing ctrl+alt+i (cmd+option+i on a Mac) and you write your code in between the first and last lines of the code chunk. All your comments, questions, thoughts, and notes are written outside of the code chunks. The comments outside of code chunks use Markdown for formatting. Markdown is a documentation language that reads well as text but converts easily to HTML and other outputs. If you don’t know it, don’t worry about it for now … it’s really just text."
  },
  {
    "objectID": "01-rstudio.html#part-two-terminology",
    "href": "01-rstudio.html#part-two-terminology",
    "title": "Using RStudio in the cloud",
    "section": "Part Two: Terminology",
    "text": "Part Two: Terminology\nSome important terminology has come up already:\n\nNotebook: a certain type of R file that allows us to write text and code together in the same document. We are using Quarto Documents, which are a kind of notebook.\ncode chunk: created by typing ctrl+alt+i (cmd+option+i on a Mac), type your code inside code chunks.\nenvironment: this is basically your workspace memory for every R session. It’s empty until you start storing information in objects.\nobjects and variables: While technically different things, we’ll use the term object and variable interchangeably. An object is something stored into memory within an R session. Objects can be data, functions or anything we can reference later. A variable is the name we give that object. Think of variables like nametags and objects like the actual items they’re describing. Again, for now you can consider them the same.\n\nFor example, the following code stores the word “spaghetti” into an object named “x”, using the assignment operator &lt;-, and then prints the contents of that object to the console below the code chunk.\n\nUse the green run arrow to run the code chunk below.\n\n\nx &lt;- \"spaghetti\"\n\nprint(x)\n\n[1] \"spaghetti\"\n\n\nYou can also use keyboard commands to run code: ctrl+Enter (or cmd-Return on a Mac) will run a line of code you are on or have selected. ctrl+Shift+Enter (or cmd-Shift-Return on Mac) will run all the code within a chunk.\nIn the example above, “spaghetti” is a string of text, or characters. You can also store numbers in objects (which do not require double quotes):\n\ny &lt;- 3\n\n\n\n\n\n\n\nWhile you can name variables whatever you want, there are some rules and conventions:\n\nYou can’t start a variable name with a number.\nVariables names have to be a single unit with no spaces. Convention is to use and underscore _ to separate terms in a name.\nUse short variable names that describe what the object represents. Don’t be generic. Use ages not my_var.\n\n\n\n\n\ndata types:\n\ncharacter : commonly referred to as a string; can be letters, numbers, punctuation, etc. Always enclosed in “double quotes”.\ninteger : a whole number, such as 1, 5, 10000. No decimal places.\nnumeric : a number that can have decimal places, such as 5.2 or 100.37\ndate : real dates understand things like months and weekdays.\nlogical : either TRUE or FALSE (not quoted)\nthere are some other data types we won’t get into today.\n\nvector: this is a common feature of R that you will use regularly. A vector is a series of values. Vectors can only store elements of the same data type, for example all strings or all numbers, and are created with the c() function:\n\n\nx &lt;- c(\"spagetti sauce\", \"noodles\", \"parmesan\")\ny &lt;- c(1,2,3)\n\n\nfunction: these are the action verbs of programming (from spreadsheets to database managers to programming languages). Every function has a particular structure and does a particular thing. The structure is: function_name(arguments). For example, the sum() function works in R the same way it works in other programs:\n\n\nx &lt;- 1\ny &lt;- 2\nsum(x,y)\n\n[1] 3\n\n\n\npackage: a set of features and functions that are not a part of base R, but that you can add to R to increase its functionality. You install packages once by using the install.packages() function. Then every time you want to use a package (such as tidyverse) in your file, you load it into your environment using the library() function. All the necessary packages for this class have already been installed.\npipe: a pipe moves information from one function to the next. There are two ways to write a pipe (long story) but they work the same: |&gt; or %&gt;%. A shortcut for typing it is ctrl+shift+m (cmd+option+m on a Mac)."
  },
  {
    "objectID": "01-rstudio.html#part-three-the-key-to-understanding-programming",
    "href": "01-rstudio.html#part-three-the-key-to-understanding-programming",
    "title": "Using RStudio in the cloud",
    "section": "Part Three: The key to understanding programming…",
    "text": "Part Three: The key to understanding programming…\nThe key to understanding a programming language like R is to understand how information is passed around. For the sake of this class, let’s refer to information as data, although it won’t always be tabular. Data can be stored in an object or printed to the console (which is directly below a code chunk in R Notebooks). Data stored in an object shows up in the environment, and can be referred to later in your script.\nAdditionally, data can be passed (or piped) through functions that filter, sort, aggregate, and/or mutate it in some way. But it will always end up either printing to the console or being stored in a variable."
  },
  {
    "objectID": "01-rstudio.html#part-four-coming-together-with-quarto",
    "href": "01-rstudio.html#part-four-coming-together-with-quarto",
    "title": "Using RStudio in the cloud",
    "section": "Part Four: Coming together with Quarto",
    "text": "Part Four: Coming together with Quarto\nAs we’ve discussed and you’ve seen within this document, we can mix together writing and explanation in our Quarto document. This allows us to publish our work as a repeatable, annotated document as HTML. To do this, we render our documents.\n\nClick on the Render button at the top-center of your Quarto document, or use cntl+Shift+k (cmd+Shift+k on a Mac)"
  }
]