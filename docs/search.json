[
  {
    "objectID": "solutions.html",
    "href": "solutions.html",
    "title": "On Your Own Solutions",
    "section": "",
    "text": "These are the answers to the On Your Own sections.\nlibrary(tidyverse)\nlibrary(janitor)"
  },
  {
    "objectID": "solutions.html#necessary-bits",
    "href": "solutions.html#necessary-bits",
    "title": "On Your Own Solutions",
    "section": "Necessary bits",
    "text": "Necessary bits\nThese are bits of code that have to have been run in the original notebook for the solutions to work.\n\nbabynames &lt;- read_rds(\"data/babynames.rds\") |&gt;\n  rename(times_given = n)"
  },
  {
    "objectID": "solutions.html#tidyverse",
    "href": "solutions.html#tidyverse",
    "title": "On Your Own Solutions",
    "section": "Tidyverse",
    "text": "Tidyverse\n\nOYO: Import\n\napplicants &lt;- read_rds(\"data/applicants.rds\")\n\napplicants\n\n\n  \n\n\n\n\n\nOYO: Tail\n\nbabynames |&gt; tail()\n\n\n  \n\n\n\n\n\nOYO: Tops your YOB\nChange the year value in the filter.\n\nbabynames |&gt; \n  arrange(desc(times_given)) |&gt; \n  filter(year == 1966) |&gt; \n  select(name, sex, times_given)\n\n\n  \n\n\n\n\n\nOYO: Most popular names by sex\nWhat are the top 5 highest shares for a name within a year for each sex.\n\nbabynames |&gt; \n  group_by(sex) |&gt; \n  slice_max(prop, n = 5)"
  },
  {
    "objectID": "solutions.html#visualizations",
    "href": "solutions.html#visualizations",
    "title": "On Your Own Solutions",
    "section": "Visualizations",
    "text": "Visualizations\n\nOYO: Make a bar chart\n\noyo_col_data &lt;- babynames |&gt; \n  filter(sex == \"M\", name == \"Liam\")\n\noyo_col_data |&gt; \n  ggplot(aes(x = year, y = times_given)) +\n  geom_col() +\n  labs(\n    title = \"The rise of Liam\",\n    subtitle = \"The name Liam was the most given name in 2023.\",\n    caption = \"By Christian McDonald\",\n    x = \"\", y = \"Times name given\"\n  )\n\n\n\n\n\n\n\n\n\n\nOYO: Make a line chart\n\njames_mary &lt;- babynames |&gt; \n  filter(\n    (name == \"James\" & sex == \"M\") |\n    (name == \"Mary\" & sex == \"F\")\n  )\n\njames_mary |&gt; \n  ggplot(\n    aes(x = year, y = prop, color = name)) + \n      geom_line()"
  },
  {
    "objectID": "guide.html#welcome",
    "href": "guide.html#welcome",
    "title": "Intro to R for Storytelling",
    "section": "Welcome",
    "text": "Welcome\n\n\n\nGrab a bagel and some coffee\n\n\n\n\n\n\n\n\n\nSign Up/Log into posit.cloud\n\n\n\n\n\n\n\nGo to this URL: posit.cloud/content/9098983\n\n\n\n\n\nMake your own copy"
  },
  {
    "objectID": "guide.html#what-today-is",
    "href": "guide.html#what-today-is",
    "title": "Intro to R for Storytelling",
    "section": "What today is …",
    "text": "What today is …\n\nWe’ll introduce you to R & RStudio. It will go fast, but there are notes\nWe’ll use a cloud version so you don’t have to install software\nOur “project” is both the lesson and the workspace\nMost code is pre-written so you can focus on the concepts\nYou will have time to experiment"
  },
  {
    "objectID": "guide.html#and-what-today-isnt",
    "href": "guide.html#and-what-today-isnt",
    "title": "Intro to R for Storytelling",
    "section": "… and what today isn’t",
    "text": "… and what today isn’t\nThree hours just isn’t much time.\n\nThis is just an introduction.\nHopefully this demystifies R a little and makes you curious\nTake my class!\n\nThere are many resources online. R for Data Science is the tidyverse bible. It’s free."
  },
  {
    "objectID": "guide.html#thank-you-for-coming",
    "href": "guide.html#thank-you-for-coming",
    "title": "Intro to R for Storytelling",
    "section": "Thank you for coming",
    "text": "Thank you for coming\nIf you are seeking extra credit from Prof. Quigley, you need to take a photo of this slide!"
  },
  {
    "objectID": "02-tidyverse.html",
    "href": "02-tidyverse.html",
    "title": "Welcome to the tidyverse",
    "section": "",
    "text": "In this notebook we’ll learn how tidyverse functions help us suss through data.\nAlong the way, we’ll explore the names given to babies since 1880, based on data from the Social Security Administration."
  },
  {
    "objectID": "02-tidyverse.html#our-questions",
    "href": "02-tidyverse.html#our-questions",
    "title": "Welcome to the tidyverse",
    "section": "Our questions",
    "text": "Our questions\nSome questions we’ll answer along the way:\n\nWhat is the most given name of all time?\nWhat are the most given names by sex?\nWhat are the most given names in each year?\nWhat are the top 5 highest shares for a name within a year for each sex?\nHow many different names have been given since 1880s."
  },
  {
    "objectID": "02-tidyverse.html#setup",
    "href": "02-tidyverse.html#setup",
    "title": "Welcome to the tidyverse",
    "section": "Setup",
    "text": "Setup\nR is an open source language where the community can build and share new code through “packages”. Packages are basically collections of pre-written code that is stored where an R user can download it to their computer and use it.\nThere is a public-benefit corporation called Posit that has written a lot of R code for data science that has become popular with journalists because the code is all written to work together in a similar fashion … the tidyverse way. The most used packages are collected into an uber package called “tidyverse”, which has already been installed on our posit.cloud virtual machines. However, for each notebook you have to declare which packages you use.\nKnowing which packages to install and use come with experience, but I always start with the tidyverse and janitor packages because they include our most-used functions.\nHere we have a code chunk you should have near the top of every notebook. In addition to loading our two libraries there are some execution options that start with #|. Those options really are “optional” so we’ll skip over them for now, but you should run the code chunk.\n\nlibrary(tidyverse)\nlibrary(janitor)\n\nYou may get lots of output from your setup chunk and some the text may be colored red. That doesn’t mean that it is broken, it’s just information."
  },
  {
    "objectID": "02-tidyverse.html#functions-are-the-thing",
    "href": "02-tidyverse.html#functions-are-the-thing",
    "title": "Welcome to the tidyverse",
    "section": "Functions are the thing",
    "text": "Functions are the thing\nIn the introduction we mentioned that functions are the action verbs of programming. In fact, learning the functions and how they work IS programming. In R, it is the construction of these functions that make up our code.\nAt their heart, functions are just pre-written code to accomplish something. Some things to know:\n\nA function name usually describes what it does: arrange() sorts things in the order you specify. library() loads a specific library. mean() gets an average of multiple numbers.\nA function has parenthesis written directly after it, without a space.\nInside the parenthesis we’ll often add “arguments” specific to the function. These are options to make the function behave a specific way. Well-written functions will have smart defaults so you only have to add arguments to change the default behavior.\nWith tidyverse functions, the first argument is usually the data you are using.\nTo make our code more easy to read, we use pipes (|&gt; or %&gt;%) to pass the results of one function into the first argument of the next function.\n\nHere is some fake code to show kinda how a pipe works.\njohn_lennon |&gt; \n  sleep(action = \"wake up\") |&gt; \n  fall(direction = \"out\", location = \"bed\") |&gt; \n  comb(method = \"drag\", direction = \"across\", body_part = \"head\")\nOK, maybe there was too much Dad in that joke."
  },
  {
    "objectID": "02-tidyverse.html#importing-data",
    "href": "02-tidyverse.html#importing-data",
    "title": "Welcome to the tidyverse",
    "section": "Importing data",
    "text": "Importing data\nThe best way to learn tidyverse functions is to use them, so we’ll start using exploring our baby names data while we talk about these things.\n\nIn the code below, we come across something that happens often in R: We have to create an object/variable before we will it with data. Think of this like a bucket of water … you have to have a bucket BEFORE you can fill it with something. babynames_raw is our empty bucket.\nThe &lt;- part of the code is the assignment operator that fills our bucket with data. It “moves” the results of the code on the right into the object on the left.\nThe read_rds() function is a function that reads in a file in a special format that R can read quickly. We give it the path to the file as an argument. There is a file saved with this notebook called babynames.rds and it is in our data folder.\nThe last line just prints out the babynames_raw data so we can see it in our notebook.\n\n\nTry using the keyboard commands to run this code. Put your cursor somewhere inside the code chunk and use Ctrl + Shift + Enter on Windows or Cmd + Shift + Return on Mac.\n\n\nbabynames_raw &lt;- read_rds(\"data/babynames.rds\")\n\nbabynames_raw\n\n\n  \n\n\n\n\nOYO: Import\nThis first “On your own” we’ll do together so I can show you some features of RStudio.\nWe want to import a file called applicants.rds. It is stored in the same data/ directory that the babynames file is.\nWe always want to build code one line at a time, so run the code after we add each part.\n\nIn the blank code chunk below …\nStart typing in the read_rds() function. You’ll see that type-assist will help you find it. When you get the right one, you can hit tab or enter to finish.\nNext we’ll supply the first argument, which is the path to the file, in quotes. The path we need is data/applicants.rds. RUN the code chunk to see it works.\nNext we’ll add the new object to put all this in, which we’ll call applicants. We need the &lt;- assignment operator, too.\nLastly on a new line we repeat applicants to print it out to the notebook.\nRun it all again to make sure it works.\n\nOK, thanks for doing that. We’ll use the applicants data later."
  },
  {
    "objectID": "02-tidyverse.html#exploring-data",
    "href": "02-tidyverse.html#exploring-data",
    "title": "Welcome to the tidyverse",
    "section": "Exploring data",
    "text": "Exploring data\nReturning to our babynames, let’s peek at the data.\n\nPrint out your data\nYou can print out your data just by naming it in a code chunk and running that line.\nThis will give you lots of information about your data, including how many rows and columns. It shows you the column names (also called variables) and the data type within those variables.\n\nRun the code chunk below so we can explore the data.\n\n\nbabynames_raw\n\n\n  \n\n\n\nMost of these column names are named what that mean, all accept n. That is shorthand for “number of observations” i.e., the number of times that name was given in that year. We’re going to change that in a minute.\n\n\nGlimpse your data\nSometimes our data has so many variables it is hard to see them all at once. I often use a function called glimpse(), which lists each columns, it’s data type, etc.\n\nRun this code chunk to peek at your data in a differen way.\n\n\nbabynames_raw |&gt; glimpse()\n\nRows: 2,117,219\nColumns: 5\n$ year &lt;dbl&gt; 1880, 1880, 1880, 1880, 1880, 1880, 1880, 1880, 1880, 1880, 1880,…\n$ sex  &lt;chr&gt; \"F\", \"F\", \"F\", \"F\", \"F\", \"F\", \"F\", \"F\", \"F\", \"F\", \"F\", \"F\", \"F\", …\n$ name &lt;chr&gt; \"Mary\", \"Anna\", \"Emma\", \"Elizabeth\", \"Minnie\", \"Margaret\", \"Ida\",…\n$ n    &lt;int&gt; 7065, 2604, 2003, 1939, 1746, 1578, 1472, 1414, 1320, 1288, 1258,…\n$ prop &lt;dbl&gt; 0.0724, 0.0267, 0.0205, 0.0199, 0.0179, 0.0162, 0.0151, 0.0145, 0…\n\n\n\n\nGet summary statistics\nAnother neat function is summary() which can give you some basic statistics about your data. This is good to see the highest and lowest values within specific variables.\n\nYep, run this one, too.\n\n\nbabynames_raw |&gt; summary()\n\n      year          sex                name                 n          \n Min.   :1880   Length:2117219     Length:2117219     Min.   :    5.0  \n 1st Qu.:1956   Class :character   Class :character   1st Qu.:    7.0  \n Median :1989   Mode  :character   Mode  :character   Median :   12.0  \n Mean   :1979                                         Mean   :  174.1  \n 3rd Qu.:2007                                         3rd Qu.:   32.0  \n Max.   :2023                                         Max.   :99693.0  \n      prop          \n Min.   :0.0000000  \n 1st Qu.:0.0000000  \n Median :0.0000000  \n Mean   :0.0001221  \n 3rd Qu.:0.0000000  \n Max.   :0.0815000  \n\n\n\n\nHead and Tail\nThe head() and tail() functions just show you a select number of lines from the top or bottom of the file.\nFrom now on, if you see a code chunk like this without any other directions to add to it, just run it so you can see what it does. It might be important for later chunks to work.\n\nbabynames_raw |&gt; head(5)\n\n\n  \n\n\n\n\n\nOYO: Try tail\nTry tail() on your own. It works the same way as head().\n\nUsing the empty code chunk below. Start with babynames and pipe into tail(). There is a keyboard shortcut for the pipe: Ctrl + Shift + M on Windows or Cmd + Shift + M on a Mac.\nTry different number values inside tail() and see what it does."
  },
  {
    "objectID": "02-tidyverse.html#cleaning-data",
    "href": "02-tidyverse.html#cleaning-data",
    "title": "Welcome to the tidyverse",
    "section": "Cleaning data",
    "text": "Cleaning data\nData is almost never perfect. In this case we have a column name “n” that isn’t very descriptive that could cause confusion later because in data science the term “n” typically stands for “number of observations”. While it is true our n column is the number of times a name appears each year, let’s rename it to something more descriptive.\nDuring this process, we will create a new R object called babynames from the original babynames_raw. Again, like we did above we have the create the thing before you can fill it, so that is why we see the new object first, then the &lt;- to fill the object with the results of the code on the right.\nOn the right side we are taking our raw data and piping it into the rename() function. That function also wants to know the new things first but a variable like this gets assigned with a single = sign, so times_given = n is renaming the n column.\n\nbabynames &lt;- babynames_raw |&gt; rename(times_given = n)\n\nbabynames |&gt; head()\n\n\n  \n\n\n\nCleaning data is often the most time consuming part of data science. We are usually making sure that variables are the correct data types, are well-named and don’t have any obvious problems. Here we just did the one thing to change a column name."
  },
  {
    "objectID": "02-tidyverse.html#focusing-data",
    "href": "02-tidyverse.html#focusing-data",
    "title": "Welcome to the tidyverse",
    "section": "Focusing data",
    "text": "Focusing data\nSometimes we want to look at specific things in our data. We might want to look at specific columns/variables, or find particular rows.\n\nArrange to sort\nWe use the arrange() function to sort data based on variables we specify. The default is to sort from smallest to largest, so we have to specify desc() if we want it the other direction.\n\nbabynames |&gt; \n  arrange(times_given)\n\n\n  \n\n\nbabynames |&gt; \n  arrange(desc(times_given))\n\n\n  \n\n\n\nThe code chunk above actually has TWO lines of code so it prints out data TWICE to your notebook into different tabs. Click on the each tab to see and compare the results.\nIn the second line, we are nesting some functions. Even with only two functions, you can see that reading from the middle of a line of code can be confusing. This is why the pipe |&gt; is so important so we can move the result of one function into another.\n\n\nFilter rows\nSometimes we want to find specific rows in our data. This next chunk of code reads like this:\n\nTake the babynames data, and then …\nArrange the result in descending order by the column times_given, and then …\nUse the filter() function to look inside the year column and find only rows with the value “2023”.\n\n\nbabynames |&gt; \n  arrange(desc(times_given)) |&gt; \n  filter(year == 2023)\n\n\n  \n\n\n\nThis gives us the most popular names in 2023! There were 31,682 different names given to boys and girls, although some names might be listed for both sexes.\n\n\nSelect columns\nIf you want to choose specific columns of data, we can use select().\nLet’s take what we have above and add select to choose to look at just two of the variables.\n\nbabynames |&gt; \n  arrange(desc(times_given)) |&gt; \n  filter(year == 2023) |&gt; \n  select(name, times_given) # selects specific columns\n\n\n  \n\n\n\nAnother way to do it is to choose which columns NOT to use by adding a - before the name.\n\nbabynames |&gt; \n  arrange(desc(times_given)) |&gt; \n  filter(year == 2023) |&gt; \n  select(-prop) # removes the prop column\n\n\n  \n\n\n\n\n\nOYO: Top names for your YOB\nFind the top names in the year you were born. Remember, it really helps to run your code after writing each line, before you add the pipe to add the next part.\n\nIn the blank code block below, start with babynames and run the chunk.\nPipe into a filter to find your birth year. You can use Cmd + Shift + M (Mac) or Ctrl + Shift + M (Windows) to write the pipe.\nPipe into another filter to find your sex.\nArrange to find the most given."
  },
  {
    "objectID": "02-tidyverse.html#summarizing-data",
    "href": "02-tidyverse.html#summarizing-data",
    "title": "Welcome to the tidyverse",
    "section": "Summarizing data",
    "text": "Summarizing data\nWhen we are looking at 2 million rows, its hard to see the forest through the trees. Sometimes we want to summarize a bunch of numbers into a single one so we can describe the group. Like finding an average of something, or using “median home sale price” to describe the value of a bunch home sales.\nThe function summarize() does just this. Feed it data, the name of a column and the method you want to use to summarize, and it will do the math.\n\nAdding with sum\nWithin our babynames data, we have the number of times a name was given to a person. We could total all those up to find out how many names were given through time.\n\nbabynames |&gt; \n  summarize(\n    total_names_given = sum(times_given)\n  )\n\n\n  \n\n\n\nInside the summarize, we had to give it our “summarizing” function, which is sum() in this case, which will add together all the values in the column we give it, which is times_given in our case.\n\n\nGrouping before summarizing\nWe can organize our data into groups before we summarize the numbers. This is very common in data journalism … to put our data into different piles based on values within a column, before we count or add it.\n\nMost given name\nOK, but what is the most given name of all time? How can we add together how many times a person has been given each name in the list?\nLet’s show an example.\n\nbabynames |&gt; \n  group_by(name) |&gt; \n  summarize(total_given = sum(times_given)) |&gt; \n  arrange(desc(total_given))\n\n\n  \n\n\n\n\n\nMost given name by sex\nWhat are the most given name by sex?\nWe can group by more than one value before we summarize. Here let’s find the most given names including sex, and then find just the female names.\n\nWe group by both name and sex.\nWe total how many times each name has been given for that sex.\nWe sort the data to put the highest total_given values at the top.\nWe filter to find just the female names.\n\n\nbabynames |&gt; \n  group_by(name, sex) |&gt; \n  summarize(total_given = sum(times_given)) |&gt; \n  arrange(desc(total_given)) |&gt; \n  filter(sex == \"F\")\n\n`summarise()` has grouped output by 'name'. You can override using the\n`.groups` argument.\n\n\n\n  \n\n\n\nSo, according to this data, more then 70,000 different names have been given to girls. The name use most often was Mary, with 4.1 million.\n\n\nMost given each year\nWhile grouping is often used with summarize, any function following group_by() will be applied with groupings. Let’s show this using slice_max(), which filters rows based on the highest value given.\nIn this code chunk, we take babynames and then find the three highest values of times_given.\n\nbabynames |&gt; \n  slice_max(times_given, n = 3)\n\n\n  \n\n\n\nBut if we group our data by year and sex first, we get the top three names for EACH year and sex.\n\nbabynames |&gt; \n  group_by(year, sex) |&gt; \n  slice_max(times_given, n = 3)\n\n\n  \n\n\n\n\n\n\nOYO: Most popular names by sex\nThe prop value in our data is the “proportion” or percentage of people that name was given to within its year. So in 1880, 7.2% of females were given the name Mary.\nUse what you’ve learned so far today to find this:\nWhat are the top 5 highest shares for a name within a year for each sex.\n\n\nGrouping and counting\nSometimes we just want to count the number of times a value appears in a column. We can use summarize to do this, too, but instead of using sum() to add together values, we use the function n() to count the number of rows that have each value.\n\nTotal names given\nWe’ll use this method to find how many different names have been given through all time.\nHere we will group by name and then count how many rows have had that name. This gives us a unique row for each name, so the total number of rows in the end is our total number of names, about 103,500 of them.\n\nbabynames |&gt; \n  group_by(name) |&gt; \n  summarize(yrs_used = n()) |&gt; \n  arrange(desc(yrs_used))\n\n\n  \n\n\n\nCouple of things to take from this result above.\n\nAt 103,564 rows, that is now many different names have been used.\nThe yrs_used column is the number of times that name appeared. The names listed at the top with 288 are names given to both boys and girls every year of our data."
  },
  {
    "objectID": "02-tidyverse.html#render-your-page",
    "href": "02-tidyverse.html#render-your-page",
    "title": "Welcome to the tidyverse",
    "section": "Render your page",
    "text": "Render your page\nClick on the Render button at the top of the document to see an HTML version of your document. All the code on the page has to work for this to happen, so if you get an error look at the message in the console and try to figure out what might be wrong. If you are in a workshop, raise your hand for some help.\nDepending on time, we might try publishing our website to quartopub.com."
  },
  {
    "objectID": "01-introduction.html",
    "href": "01-introduction.html",
    "title": "Using RStudio in the cloud",
    "section": "",
    "text": "This lesson is designed to be run on posit.cloud in a workshop situation, but there is no reason it can’t be completed using RStudio Desktop if you are familiar with it. The lessons would need to be downloaded from Github and packages installed, but directions for that are beyond the scope of this lesson."
  },
  {
    "objectID": "01-introduction.html#reading-these-lessons",
    "href": "01-introduction.html#reading-these-lessons",
    "title": "Using RStudio in the cloud",
    "section": "Reading these lessons",
    "text": "Reading these lessons\nThese lessons are written using Markdown in Quarto notebooks, so you will be directly reading the code. Most everything will look like text and be perfectly readable, but some constructions may be new to you. So some quick tips.\n\nText that starts with a dash or asterisk is part of list, and it is information for you to consume.\nYou might see formatting that starts and ends with tick marks like this: variable_name. This is a way to designate code or a file name within Markdown prose. If you are asked to use a value in some way, don’t include the tick marks.\nYou might also see links to web pages like this: tidyverse.\nYou’ll see lots of other Markdown syntax like headlines that hopefully will make sense over time.\n\nIf you see items in an ordered list that start with numbers, that is an indication YOU SHOULD DO WHAT IT SAYS.\n\nAn item like this is a direction. Do what it says.\nThis would be the next direction.\n\nWe’ll talk more about why we use Markdown and Quarto in a bit."
  },
  {
    "objectID": "01-introduction.html#the-story-so-far",
    "href": "01-introduction.html#the-story-so-far",
    "title": "Using RStudio in the cloud",
    "section": "The story so far …",
    "text": "The story so far …\nWe are assuming at this point that you have ALREADY done these things:\n\nUsing a web browser signed up and logged into posit.cloud\nYou’ve opened a copy of the project and are reading this file.\n\nIf all that is true, then you are running a “virtual machine” in your browser that has R and RStudio installed, and you have a “project” open, and in that project you reading this file."
  },
  {
    "objectID": "01-introduction.html#part-one-getting-familiar-with-rstudio",
    "href": "01-introduction.html#part-one-getting-familiar-with-rstudio",
    "title": "Using RStudio in the cloud",
    "section": "Part One: Getting familiar with RStudio",
    "text": "Part One: Getting familiar with RStudio\nRStudio is your dashboard for writing R code. Open files will show up in the upper-left quadrant of RStudio.\nThe upper-right quadrant has several tabs, the first of which is Environment: Code objects stored in memory (such as a table of data), will show up there.\nThe lower-right quadrant also has several tabs, the first of which is Files: it shows what files exist in your current working directory, which is this workshop folder. Among those files are ones that end with .qmd, which are Quarto files we will edit. Once opened, they appear in the upper-left quadrant.\nIn the lower-left, you’ll see the Console. This will reflect all the R code you run, but we don’t do much with it when we’re working in Quarto files. There is also Terminal, which is a way to interface your computer through written commands. We won’t be using that today, but if you continue with this type of work you likely will.\nI encourage writing R code within Quarto Document files (.qmd) because they enable you to both write comments (like these sentences) and to write code, in what we call a code chunk.\n\nWhen you see a numbered list item like the one below, these are directions for you follow. So do what is says!\n\n\nIn the code chunk below you’ll see a right-pointing green arrow at the top-right of the chunk. Click on that arrow and you’ll “run” all the code inside the chunk.\n\n\nmessage &lt;- \"Hello, World!\"\n\nprint(message)\n\n[1] \"Hello, World!\"\n\n\nIn Quarto files, the results of the code in each code chunk will print below the chunk, allowing you to quickly see the results of your work. This allows us to intersperse our prose notes and explanations in between our code. The merits of this will hopefully become apparent as we work on this throughout the day.\nYou create a code chunk by typing ctrl+alt+i (cmd+option+i on a Mac) and you write your code in between the first and last lines of the code chunk. All your comments, questions, thoughts, and notes are written outside of the code chunks are written in Markdown, a documentation language that reads well as text but converts easily to HTML and other outputs. If you don’t know it, don’t worry about it for now … it’s really just text.\n\nCreate a new code chunk after these directions using the keyboard commands.\nType in the object message and then run the chunk.\n\nThe “Hello, World!” message will print out again because that text was saved into an object named message. We’ll talk about objects next.\nWe can usually just type an object name and it will print to the console. But we sometimes use print() to make sure the object prints to the console, even if it’s not the last line of code in a chunk."
  },
  {
    "objectID": "01-introduction.html#part-two-terminology",
    "href": "01-introduction.html#part-two-terminology",
    "title": "Using RStudio in the cloud",
    "section": "Part Two: Terminology",
    "text": "Part Two: Terminology\nSome important terminology has come up already:\n\nnotebook: certain type of R file that allows us to write text and code together in the same document. We are using Quarto Documents, which are a kind of interactive notebook.\ncode chunk: created by typing ctrl+alt+i (cmd+option+i on a Mac). Type your code inside code chunks.\nEnvironment: this is basically your workspace memory for every R session. It’s empty until you start storing information in objects. You should see an object named message in your environment now.\nobjects and variables: While technically different things, people sometimes use the term object and variable interchangeably. An object is something stored into memory within an R session. Objects can be data, functions or anything we can reference later. A variable is the name of an object. Think of variables like nametags and objects like the actual items they’re describing. Variable is also the term R uses for the names of columns inside data.\n\nFor example, the following code stores the word “spaghetti” into an object named “x”, using the assignment operator &lt;-, and then prints the contents of that object to the console below the code chunk.\n\nUse the green run arrow to run the code chunk below.\n\n\nx &lt;- \"spaghetti\"\n\nx\n\n[1] \"spaghetti\"\n\n\nYou can also use keyboard commands to run code: ctrl+Enter (or cmd-Return on a Mac) will run a line of code you are on or have selected. ctrl+Shift+Enter (or cmd-Shift-Return on Mac) will run all the code within a chunk.\nIn the example above, “spaghetti” is a string of text, or characters. You can also store numbers in objects (which do not require double quotes):\n\ny &lt;- 3\n\ny\n\n[1] 3\n\n\n\n\n\n\n\n\nWhile you can name variables whatever you want, there are some rules and conventions:\n\nYou can’t start a variable name with a number.\nVariable names must be a single unit with no spaces. Convention is to use an underscore _ to separate terms in a name.\nUse short variable names that describe what the object represents. Don’t be generic. If your variable stores a number value of someone’s age, Use age not my_var.\n\n\n\n\n\ndata types: The kind of data we are working with …\n\ncharacter : commonly referred to as a string; can be letters, numbers, punctuation, etc. Always enclosed in “double quotes”.\ninteger : a whole number, such as 1, 5, 10000. No decimal places.\nnumeric : a number that can have decimal places, such as 5.2 or 100.37\ndate : real dates understand things like months and weekdays.\nlogical : either TRUE or FALSE (not quoted)\nthere are some other data types we won’t get into today.\n\nvector: this is a common feature of R that you will use regularly. A vector is a series of values. Vectors can only store elements of the same data type, for example all strings or all numbers, and are created with the c() function:\n\n\nUse the green arrow or the keyboard commands to run the code chunk below.\n\n\nfood_list &lt;- c(\"spagetti sauce\", \"noodles\", \"parmesan\")\nnumbs &lt;- c(1,2,3)\n\nfood_list\n\n[1] \"spagetti sauce\" \"noodles\"        \"parmesan\"      \n\nnumbs\n\n[1] 1 2 3\n\n\n\nfunction: these are the action verbs of programming. (Not just in R, but also spreadsheets, database managers and other programming languages). Every function has a particular structure and does a particular thing. The structure is: function_name(arguments). For example, the sum() function works in R the same way it works in other programs.\n\n\nUse the green arrow to run the chunk below and see the sum of x and y.\n\n\na &lt;- 1\nb &lt;- 2\nsum(a,b)\n\n[1] 3\n\n\n\npackage: a set of features and functions that are not a part of base R, but that you can add to R to increase its functionality. You install packages on your computer once by using the install.packages() function. Then every time you want to use a package (such as tidyverse) in your file, you load it into your environment using the library() function. All the necessary packages for this class have already been installed on your virtual machine.\npipe: a pipe moves information from one function to the next. There are two ways to write a pipe (long story) but they work the same: |&gt; or %&gt;%. A shortcut for typing it is ctrl+shift+m (cmd+shift+m on a Mac).\n\n\nRun the code chunk below to show how to use the typeof() function to find the data type of “food_list”. The second line does the same thing, but it is moving our object food_list into the function using using the pipe.\n\n\ntypeof(food_list)\n\n[1] \"character\"\n\nfood_list |&gt; typeof()\n\n[1] \"character\"\n\n\nAs we go through the day you’ll hopefully see why pipes make our code much easier to understand."
  },
  {
    "objectID": "01-introduction.html#part-three-where-the-data-goes",
    "href": "01-introduction.html#part-three-where-the-data-goes",
    "title": "Using RStudio in the cloud",
    "section": "Part Three: Where the data goes",
    "text": "Part Three: Where the data goes\nThe key to understanding a programming language like R is to understand how information is passed around. For the sake of this class, let’s refer to information as data, although it won’t always be tabular. Data can be stored in an object or printed to the console (which is directly below a code chunk in our notebooks). Data stored in an object shows up in the Environment, and can be referred to later in your script.\nAdditionally, data can be passed (or piped) through functions that filter, sort, aggregate, and/or mutate it in some way. But it will always end up either printing to the console or being stored in a variable."
  },
  {
    "objectID": "01-introduction.html#part-four-coming-together-with-quarto",
    "href": "01-introduction.html#part-four-coming-together-with-quarto",
    "title": "Using RStudio in the cloud",
    "section": "Part Four: Coming together with Quarto",
    "text": "Part Four: Coming together with Quarto\nAs you’ve seen within this document, we can mix together writing and explanation in our Quarto document. This allows us to publish our work as a repeatable, annotated document as HTML. To do this, we render our documents.\n\nClick on the Render button at the top-center of your Quarto document, or use cntl+Shift+k (cmd+Shift+k on a Mac), to turn your document into HTML.\n\nThis will open a web page either within RStudio’s “Viewer” pane, or in a separate web browser window. Look through this page and compare how your text and code looks in your Quarto document vs what is displayed on the web page.\n(If you got an error when you rendered, raise your hand so someone can help troubleshoot it.)\nYou can use Quarto and Markdown to create websites, books, slideshows and more.\nLet’s learn some more code. Save and close this document by clicking on the small x after it’s name, then open the 02-tidyverse.qmd file by clicking on it in your Files pane."
  },
  {
    "objectID": "03-visualizations.html",
    "href": "03-visualizations.html",
    "title": "Visualizations",
    "section": "",
    "text": "Now let’s it’s time to really SEE our data. We will explore a tidyverse package called ggplot2, though we just say “ggplot” without the 2. It is a series of functions that allows you to crate any chart you want - just like how you can combine different ingredients to make different meals. Instead of just picking from pre-made chart types like pie or bar charts, you build your visualization in layers by choosing what data to show, how to represent it (like with points, lines, or bars), and how to arrange everything on the canvas. Think of it like LEGO bricks - you can combine simple pieces (like marks, scales, and coordinates) in different ways to create exactly the chart you need to tell your data’s story.”\nThe package ggplot2 is quite extensive, allowing us to create a number of visualizations with tremendous flexibility and customization. We will just touch the surface of what it can do, but there are other great resources to learn more about what it can do:"
  },
  {
    "objectID": "03-visualizations.html#examples",
    "href": "03-visualizations.html#examples",
    "title": "Visualizations",
    "section": "Examples",
    "text": "Examples\nHere are some example charts to show how different they can be .."
  },
  {
    "objectID": "03-visualizations.html#setup",
    "href": "03-visualizations.html#setup",
    "title": "Visualizations",
    "section": "Setup",
    "text": "Setup\nAt the end of our last lesson we “Rendered” our page into HTML so you can share your analysis with others. Each Quarto document needs to run independently to render, so each notebook must have the code to load the libraries and data it needs.\nThat’s what this next chunk is. We are loading some libraries and importing our data again. Make sure you run this chunk!\n\nlibrary(tidyverse)\nlibrary(janitor)\nlibrary(scales)\n\nbabynames &lt;-  read_rds(\"data/babynames.rds\") |&gt; rename(times_given = n)\n\nbabynames |&gt; glimpse()\n\nRows: 2,117,219\nColumns: 5\n$ year        &lt;dbl&gt; 1880, 1880, 1880, 1880, 1880, 1880, 1880, 1880, 1880, 1880…\n$ sex         &lt;chr&gt; \"F\", \"F\", \"F\", \"F\", \"F\", \"F\", \"F\", \"F\", \"F\", \"F\", \"F\", \"F\"…\n$ name        &lt;chr&gt; \"Mary\", \"Anna\", \"Emma\", \"Elizabeth\", \"Minnie\", \"Margaret\",…\n$ times_given &lt;int&gt; 7065, 2604, 2003, 1939, 1746, 1578, 1472, 1414, 1320, 1288…\n$ prop        &lt;dbl&gt; 0.0724, 0.0267, 0.0205, 0.0199, 0.0179, 0.0162, 0.0151, 0.…"
  },
  {
    "objectID": "03-visualizations.html#barcolumn-chart",
    "href": "03-visualizations.html#barcolumn-chart",
    "title": "Visualizations",
    "section": "Bar/column chart",
    "text": "Bar/column chart\nTrying to directly chart 2 million rows of data isn’t very effective, so we usually summarize our data using the techniques from our last lesson.\n\nSummarizing our top 5\nIn this case, we will take the five most popular names from 2023, and plot them as a bar chart. We’ll start by getting our data ready.\nThis next code block starts with the babynames data, filters it to just 2023, and the “slices” it to get the five highest values in the times_given column. It is then sorted by sex. The result of all that was saved into a new object called top_5_data, which is what we’ll plot.\n\ntop_5_data &lt;- babynames |&gt;\n  filter(year == 2023) |&gt;\n  slice_max(times_given, n = 5) |&gt;\n  arrange(sex)\n\ntop_5_data\n\n\n  \n\n\n\n\n\n\n\n\n\nBuilding a chart in layers\n\n\n\nUsually when we build a chart, we would keep adding our layers into the SAME code chunk, rerunning the code with each addition to make sure the changes work the way we want. In this exercise, we are creating new code chunks so you can see the difference between each layer as we add it.\nAlso, with this first chart we are going to do a LOT of modifications, more than you might need just so see your data. But the idea is to show you the kinds of things that you can change, and how.\n\n\n\n\nThe canvas\nFirst, let’s create a blank canvas\n\ntop_5_data |&gt; ggplot()\n\n\n\n\n\n\n\n\nThis doesn’t show us much, but be patient.\n\n\nAesthetics\nBeyond our data, the next thing our chart needs is which data to use to build it’s x and y axis. In our case, we want our names to go along the bottom (the x axis) and the number of times that name was given along the y axis.\nEach time we want to pull from our data to use in our chart, we have to reference it through a function called aes(), which is short for aesthetics. It’s called “aesthetic” because it deals with how things look and how we perceive them - just like how art is about the aesthetics of color, shape, and form.\n\ntop_5_data |&gt; ggplot(aes(x = name, y = times_given)) \n\n\n\n\n\n\n\n\nThis adds the axis names, but it doesn’t show anything on the chart yet because there are soooo many different ways we could do that. We need to specify what shape to use.\n\n\nGeoms\nTo paint our data onto our canvas, we need to describe the shape or “geometry” that we want to see. There are many choices, and the functions always start with geom_. The geoms determine what kind of chart will get added to our canvas.\nHere we will add a geom to make a column chart. When we add a layer onto our chart, we use the + sign at the end of a line, then the new layer.\n\ntop_5_data |&gt; ggplot(aes(x = name, y = times_given)) +\n  geom_col()\n\n\n\n\n\n\n\n\nOK, we are getting somewhere, but this is not really how we want this to look.\n\n\nReorder bars\nFirst, let’s order the bars by the times_given. We’ve also reorganized our code a little bit because with more options, it gets hard to read. By breaking it up into multiple lines, it’s easier to see what’s going on.\n\ntop_5_data |&gt; ggplot(aes(\n    x = reorder(name,desc(times_given)), # edits to reorder the bars\n    y = times_given\n  )) +\n  geom_col()\n\n\n\n\n\n\n\n\nThat’s getting a bit better, but that color is hideous!\n\n\nSetting a color\nIn R, we can use a selection of named colors, or any hex value.\n\ntop_5_data |&gt; ggplot(aes(\n    x = reorder(name,desc(times_given)),\n    y = times_given\n  )) +\n  geom_col(fill = \"cadetblue\", alpha = .8) # arguments set colors and transparency\n\n\n\n\n\n\n\n\nLooking better, but I don’t love the y-axis. Let’s add commas to the tick mark labels.\n\n\nFormatting the y-axis\nWe can use a function scale_y_continuous to make adjustments to this y-axes, adding commas to the numbers using the label argument and a function from the scales package called label_comma().\n\ntop_5_data |&gt; ggplot(aes(\n    x = reorder(name,desc(times_given)),\n    y = times_given\n  )) +\n  geom_col(fill = \"cadetblue\", alpha = .8) +\n  scale_y_continuous(labels = label_comma()) # edits y numbers to add commas\n\n\n\n\n\n\n\n\nIf that seems a bit esoteric, you are right. I did NOT know that from the top of my head, I had to look it up. You can change anything you want on a ggplot chart if you know the proper function, but there are a ton of them. I’ll often consult the ggplot2 cheat sheet, the ggplot book or the ggplot2tor apps to find function names.\n\n\nAdding labels and a title\nNow let’s get rid of that ugly background, those axis labels, and add a title to our chart.\nWe’ve added a function called labs() that allows us to add and modify much of the text on a chart. We’ve added a title and subtitle to our chart, and we’ve set our x and y axis labels to be blank by setting them to an empty string.\n\ntop_5_data |&gt; ggplot(aes(\n    x = reorder(name,desc(times_given)),\n    y = times_given\n  )) +\n  geom_col(fill = \"cadetblue\", alpha = .8) +\n  scale_y_continuous(labels = label_comma()) +\n  # labs add or adjusts text items\n  labs(\n    title = \"The 10 most common baby names in 2023\",\n    subtitle = \"None of these are Heaven spelled backwards.\",\n    x = \"\", y = \"\",\n    caption = \"Source: Social Security Administration\\nby Christian McDonald\"\n  )\n\n\n\n\n\n\n\n\n\n\nAdding geoms\nWe can add text to our chart using the geom_text() function. In that function We’ve added a label argument so it plots the times_given values onto the chart as text. Note that because we are pulling from our data to get the times_given, we have to use an aes() function to get it on our chart. It’s placing the text right where the data would plot, so at the end of the existing bar on the chart.\nBut we also added the vjust argument that tells the function to adjust the vertical position of the text up or down. Since this value of “2” isn’t coming from the data, this argument is outside the aes() function.\n\nTry adjusting the vjust = 2 value to another number like “3” or “-1” to see what it does. Then put it back. ;-).\n\n\ntop_5_data |&gt; \n  ggplot(aes(x = reorder(name,desc(times_given)),\n                         y = times_given)) +\n  geom_col(fill = \"cadetblue\", alpha = .8) +\n  scale_y_continuous(labels = label_comma()) +\n  labs(\n    title = \"The 10 most common baby names in 2023\",\n    subtitle = \"None of these are Heaven spelled backwards.\",\n    x = \"\", y = \"\",\n    caption = \"Source: Social Security Administration\\nby Christian McDonald\"\n  ) +\n  geom_text(aes(label = comma(times_given)), vjust = 2) # plots the times_given values as text\n\n\n\n\n\n\n\n\nThis is looking pretty good, but now we have labels both on the axis and the bars, and we don’t need both. We also could clean this up by removing the background.\n\n\nThemes\nThemes are basically a combination of pre-set functions that control the look of a chart. Ggplot has several built-in themes and the one we add below is theme_minmal, which removes the background grid and other elements.\n\ntop_5_data |&gt; \n  ggplot(aes(x = reorder(name,desc(times_given)),\n                         y = times_given)) +\n  geom_col(fill = \"cadetblue\", alpha = .8) +\n  scale_y_continuous(labels = label_comma()) +\n  labs(\n    title = \"The 10 most common baby names in 2023\",\n    subtitle = \"None of these are Heaven spelled backwards.\",\n    x = \"\", y = \"\",\n    caption = \"Source: Social Security Administration\\nby Christian McDonald\"\n  ) +\n  geom_text(aes(label = comma(times_given)), vjust = 2) +\n  theme_minimal() # changes the theme\n\n\n\n\n\n\n\n\nAnd that indeed helped us a bit, but I’d like to get rid of the gridlines an axis measurements. We can do that with the theme() function, but again we have to look up the arguments to know what to set them to. I used this ggplot2tor theme finder to find them.\n\ntop_5_data |&gt; \n  ggplot(aes(x = reorder(name,desc(times_given)),\n                         y = times_given)) +\n  geom_col(fill = \"cadetblue\", alpha = .8) +\n  scale_y_continuous(labels = label_comma()) +\n  labs(\n    title = \"The 10 most common baby names in 2023\",\n    subtitle = \"None of these are Heaven spelled backwards.\",\n    x = \"\", y = \"\",\n    caption = \"Source: Social Security Administration\\nby Christian McDonald\"\n  ) +\n  geom_text(aes(label = comma(times_given)), vjust = 2) +\n  theme_minimal() +\n  # the stuff below removes grid lines, etc.\n  theme(\n    axis.text.y = element_blank(),\n    panel.grid.major = element_blank(),\n    panel.grid.minor = element_blank()\n  )\n\n\n\n\n\n\n\n\nOK, that’s looking pretty good. But what if we want to color.\n\n\nManual colors\nSome of these are characterized as male names and some as female. What if we want to color code them?\nIn our global aes() function we can pull from our data to code the bars based on sex. We’ve added fill = sex as noted in comments below.\n\ntop_5_data |&gt; ggplot(aes(\n    x = reorder(name,desc(times_given)),\n    y = times_given,\n    fill = sex # added fill here\n  )) +\n  geom_col(alpha = .8) +\n  scale_y_continuous(labels = label_comma()) +\n  labs(\n    title = \"The 10 most common baby names in 2023\",\n    subtitle = \"None of these are Heaven spelled backwards.\",\n    x = \"\", y = \"\",\n    caption = \"Source: Social Security Administration\\nby Christian McDonald\"\n  ) +\n  geom_text(aes(label = comma(times_given)), vjust = 2) +\n  theme_minimal() +\n  theme(\n    axis.text.y = element_blank(),\n    panel.grid.major = element_blank(),\n    panel.grid.minor = element_blank()\n  )\n\n\n\n\n\n\n\n\nNot bad, but these colors are kinda problematic, let’s pick our own. Again, we might have to do some research to figure out how, searching in ggplot book or the ggplot2tor scale finder\n\nWe’re adding a scale_fill_manual() function to set the colors of the bars.\nWe’re adding an argument in labs() to change/capitalize the title of the legend.\n\n\ntop_5_data |&gt; ggplot(aes(\n    x = reorder(name,desc(times_given)),\n    y = times_given,\n    fill = sex # added fill here\n  )) +\n  geom_col(alpha = .8) +\n  scale_y_continuous(labels = label_comma()) +\n  labs(\n    title = \"The 10 most common baby names in 2023\",\n    subtitle = \"None of these are Heaven spelled backwards.\",\n    x = \"\", y = \"\",\n    caption = \"Source: Social Security Administration\\nby Christian McDonald\",\n    fill = \"Sex\" # added to change legend title\n  ) +\n  geom_text(aes(label = comma(times_given)), vjust = 2) +\n  theme_minimal() +\n  theme(\n    axis.text.y = element_blank(),\n    panel.grid.major = element_blank(),\n    panel.grid.minor = element_blank()\n  ) +\n  scale_fill_manual(values=c(\"#756bb1\", \"#2ca25f\")) # changes color of bars\n\n\n\n\n\n\n\n\n\n\nOYO: Make a bar chart\nWith a buddy, make your own super awesome bar chart. Remember you’ll first have to summarize your data to make it manageable.\nIf you need an idea, I have one here for you. Below you’ll find code that filters our data to find all the instances of our most popular male name from 2023, “Liam”. You could plot the number of times this name has been given with x as the year and y as the number of times given.\nYou might also change the name or sex value to get data for a different name.\n\noyo_col_data &lt;- babynames |&gt; \n  filter(sex == \"M\", name == \"Liam\")\n\noyo_col_data\n\n\n  \n\n\n\nNow that you have data, edit this code to make a column chart:\n\nStart by adding x and y values in the aes() function to the appropriate columns.\nAdd a geom_col() function to add the columns to the chart.\nAdd a labs() function for titles, etc.\n\n\noyo_col_data |&gt; ggplot()"
  },
  {
    "objectID": "03-visualizations.html#line-chart",
    "href": "03-visualizations.html#line-chart",
    "title": "Visualizations",
    "section": "Line chart",
    "text": "Line chart\nSo far, we’ve been plotting one type of thing. But what if we want to see how the popularity of multiple names have changed over time? We can use a line chart to show that.\n\nPrepping the data\nWe’ll need to figure out what those top names are and build our data set to include them. We’re going to do this in two steps. First we need to find our most popular names and create a list of them to filter with.\n\nWe create a new object name because you have to have a bucket before you can fill it.\nWe start with our babynames data.\nWe filter it to just the year 2023 and for just females.\nWe slice the data to get the top 5 names by times_given.\n\nIn the second step we use the pull() function to pull out just the names from the data set. We save that, too, because it’s what we’ll use to filter our data.\n\ntop_fname_2023 &lt;- babynames |&gt; \n  filter(year == 2023, sex == \"F\") |&gt; \n  slice_max(times_given, n = 5)\n\ntop_fname_2023\n\n\n  \n\n\ntop_fname_2023_list &lt;- top_fname_2023 |&gt; pull(name)\n\ntop_fname_2023_list\n\n[1] \"Olivia\"    \"Emma\"      \"Charlotte\" \"Amelia\"    \"Sophia\"   \n\n\nNow that we have a list of names, we’ll use that to filter our original data to include rows just with those names.\n\nHere we create our new data bucket, then fill it …\nWe start with our original baby names data, but then we filter it to rows where the name is any value in our top_names_2023 list. We also filter for just females because some names could also be given to males, which would muck up everything. (Don’t they always? badumph!)\n\n\ntop_5f_years &lt;- babynames |&gt; \n  filter(name %in% top_fname_2023_list, sex == \"F\")\n  \ntop_5f_years\n\n\n  \n\n\n\n\n\nStart with canvas\n\n\n\n\n\n\nAgain, normally we would build this chart step by step in the SAME code chunk, but we will create new ones here so you can see the differences in each step.\n\n\n\nWe start by setting up our canvas, setting what data we want on the x and y axis.\n\ntop_5f_years |&gt; ggplot(aes(x = year, y = prop))\n\n\n\n\n\n\n\n\nAnd now we’ll add lines and adjust our code to be more readable. There are a couple of parts to this:\n\ngeom_line() is the geom to add lines to the chart.\nHowever if we only add geom_line the chart doesn’t know to split the lines by name. We have to tell it to do that by adding color = name to the aes() function.\nWe’ve also added the minimal them just to look nicer.\n\n\ntop_5f_years |&gt; ggplot(aes(x = year, y = prop, color = name)) + # color added to separate the lines\n  geom_line() + # adds the lines\n  theme_minimal() # adjust the theme\n\n\n\n\n\n\n\n\n\n\nCosmetic adjustments\nNow we can make some cosmetic changes to our chart. We’re adding a lot here at once in the interest of time. Again, we would likely reference the ggplot book or ggplot2tor site to find the functions we need to make these changes.\n\nWe adjust the y axis to use % instead of fractions\nWe adjust the frequency of the grid lines on the x axis\nIn our labs we add basic titles and adjust the axis labels\n\n\ntop_5f_years |&gt; ggplot(aes(x = year, y = prop, color = name)) +\n  geom_line() +\n  scale_y_continuous(labels = scales::percent) + # % in y axis\n  scale_x_continuous(breaks = seq(1880,2023,20)) + # adjust x grid lines\n  theme_minimal() +\n  labs(\n    title = \"My awesome chart title\",\n    subtitle = \"Names as a percentage of all births\",\n    color = \"Baby name\",\n    y = \"Proportion name given in year\", x = \"\"\n  )\n\n\n\n\n\n\n\n\nAnd here’s a quick alternative version of the same chart using geom_density. It might be pretty, but is is easier to read?\n\ntop_5f_years |&gt; ggplot(aes(x = year, y = prop, color = name, fill = name)) +\n  geom_density(stat = \"identity\", alpha = .5) +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\nOYO: Make a line chart\nWith a buddy, make your own super awesome line chart. Remember you’ll first have to summarize your data to make it manageable.\nI’ll prep some data for you to track the popularity of the names “James” and “Mary” over time. You can use this data to make a line chart.\n\njames_mary &lt;- babynames |&gt; \n  filter(\n    (name == \"James\" & sex == \"M\") |\n    (name == \"Mary\" & sex == \"F\")\n  )\n\njames_mary\n\n\n  \n\n\n\nNow plot the prop values for these two names over time."
  },
  {
    "objectID": "03-visualizations.html#faceting",
    "href": "03-visualizations.html#faceting",
    "title": "Visualizations",
    "section": "Faceting",
    "text": "Faceting\nFaceting is a way to break up your data into smaller pieces and plot them separately. This is useful when you have a lot of data and you want to see how different parts of it compare to each other.\nLet’s walk through an example of this by plotting the popularity of the top 20 names over time.\nFirst we need to find those top 20 names. It’s similar to what we did for the top 5 female names so I’m going to skip that explanation here.\n\ntop20_names &lt;- babynames |&gt;\n  group_by(name) |&gt; \n  summarize(total = sum(times_given)) |&gt; \n  arrange(desc(total)) |&gt;\n  slice_max(total, n = 20) |&gt; \n  pull(name)\n\ntop20_names_data &lt;- babynames |&gt; \n  filter(name %in% top20_names)\n\ntop20_names_data\n\n\n  \n\n\n\nAnd now the chart. We’re going to add a facet_wrap() function to our chart to break it up by name. We also make some other changes to use percentages, change the grid lines to every 50 years, and some other theme changes.\n\ntop20_names_data |&gt; ggplot(aes(x = year, y = prop, color = name)) +\n  geom_line() +\n  scale_y_continuous(labels = scales::percent) +\n  scale_x_continuous(breaks = seq(1900,2023,50)) +\n  theme_minimal() +\n  theme(legend.position = \"none\") +\n  facet_wrap(vars(name), ncol = 5) # this is the facet magic"
  },
  {
    "objectID": "03-visualizations.html#more-on-your-own",
    "href": "03-visualizations.html#more-on-your-own",
    "title": "Visualizations",
    "section": "More on your own",
    "text": "More on your own\nWhat do you want to know about the history of names in America? Let’s figure it out."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Introduction to R for Storytelling",
    "section": "",
    "text": "Welcome to this three-hour workshop where you’ll be introduced to the basics of the data science language R and some tools to use it to find and tell stories.\nIn this workshop we’ll explore the popularity of names in the United States over time. We’ll use data from the Social Security Administration, which has been tracking the popularity of baby names since 1880.\n\n\nThis workshop is designed to be run in the cloud, so you don’t need to install any software on your computer. We’ll be using a tool called posit.cloud, which is an online version of R & RStudio, the popular data analysis tools.\n\nGo to posit.cloud, which is an online version of R & RStudio, the tools we’ll use in this workshop.\nIf you don’t already have an account, use the Sign up or Get Started options to create a new account. If you already have an account, go ahead and log in.\nOnce you are logged into posit.cloud, go to this URL: posit.cloud/content/9098983\nWe’ll start with the file 01-introduction.qmd\n\n\nWhile this lesson is designed to be run on posit.cloud in a workshop situation, it could be completed using RStudio Desktop if you are familiar with it. The lessons would need to be downloaded from Github and packages installed, but directions for that are beyond the scope of this lesson.\n\n\n\n\nThis workshop was written by Christian McDonald, an Associate Professor of Practice in the School of Journalism and Media, a department of Moody College of Communication at the University of Texas at Austin. It is presented by the Media Innovation Group, a collective of student projects funded by the Dallas Morning News Journalism Innovation Endowment.\n\n\n\n\nR for Data Science\nQuarto Guide"
  },
  {
    "objectID": "index.html#using-posit.cloud",
    "href": "index.html#using-posit.cloud",
    "title": "Introduction to R for Storytelling",
    "section": "",
    "text": "This workshop is designed to be run in the cloud, so you don’t need to install any software on your computer. We’ll be using a tool called posit.cloud, which is an online version of R & RStudio, the popular data analysis tools.\n\nGo to posit.cloud, which is an online version of R & RStudio, the tools we’ll use in this workshop.\nIf you don’t already have an account, use the Sign up or Get Started options to create a new account. If you already have an account, go ahead and log in.\nOnce you are logged into posit.cloud, go to this URL: posit.cloud/content/9098983\nWe’ll start with the file 01-introduction.qmd\n\n\nWhile this lesson is designed to be run on posit.cloud in a workshop situation, it could be completed using RStudio Desktop if you are familiar with it. The lessons would need to be downloaded from Github and packages installed, but directions for that are beyond the scope of this lesson."
  },
  {
    "objectID": "index.html#about-this-workshop",
    "href": "index.html#about-this-workshop",
    "title": "Introduction to R for Storytelling",
    "section": "",
    "text": "This workshop was written by Christian McDonald, an Associate Professor of Practice in the School of Journalism and Media, a department of Moody College of Communication at the University of Texas at Austin. It is presented by the Media Innovation Group, a collective of student projects funded by the Dallas Morning News Journalism Innovation Endowment."
  },
  {
    "objectID": "index.html#resources-for-r",
    "href": "index.html#resources-for-r",
    "title": "Introduction to R for Storytelling",
    "section": "",
    "text": "R for Data Science\nQuarto Guide"
  }
]